name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
    paths: [ 'Stocks/**' ]  # Only trigger when Stocks folder changes
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ai-stock-tracker
  APP_RUNNER_SERVICE: ai-stock-tracker

jobs:
  deploy:
    name: Deploy to AWS App Runner
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd Stocks
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Update App Runner service
      run: |
        # Create config file with actual secrets using envsubst
        cp Stocks/aws/apprunner-config.json config-with-secrets.json
        
        # Replace secrets using environment variables
        export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
        export MAILGUN_API_KEY="${{ secrets.MAILGUN_API_KEY }}"
        export MAILGUN_DOMAIN="${{ secrets.MAILGUN_DOMAIN }}"
        export NEWS_API_KEY="${{ secrets.NEWS_API_KEY }}"
        
        # Use envsubst to replace variables
        envsubst < config-with-secrets.json > config-final.json
        
        # Get the service ARN
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        
        if [ -z "$SERVICE_ARN" ]; then
          echo "Creating new App Runner service..."
          aws apprunner create-service \
            --service-name $APP_RUNNER_SERVICE \
            --source-configuration file://config-final.json \
            --instance-configuration '{
                "Cpu": "1 vCPU",
                "Memory": "2 GB"
            }'
        else
          echo "Updating existing App Runner service..."
          aws apprunner start-deployment \
            --service-arn $SERVICE_ARN
        fi
        
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE'].ServiceArn" --output text)
        SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.ServiceUrl' --output text)
        echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
        
    - name: Deployment Status
      run: |
        echo "üöÄ Deployment completed!"
        echo "üåê Your app is available at: ${{ steps.get-url.outputs.service-url }}"
        echo "üìä Check the deployment status in the AWS Console"
